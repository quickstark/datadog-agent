# At the top of the file, add a comment about organization secrets
# This workflow uses both repository secrets (project-specific) and organization secrets (shared infrastructure)
# 
# Organization Secrets (set once, used everywhere):
# - SYNOLOGY_HOST, SYNOLOGY_SSH_PORT, SYNOLOGY_USER, SYNOLOGY_SSH_KEY
# - DOCKERHUB_USER, DOCKERHUB_TOKEN
#
# Repository Secrets (project-specific):
# - DD_API_KEY, DD_OPW_API_KEY, DD_OP_PIPELINE_ID
# - Any project-specific database credentials, etc.

name: Build and Deploy Datadog Agent
on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'datadog.yaml'
      - 'docker-compose.yaml'
      - 'conf.d/**'
      - 'system-probe.yaml'
      - 'scripts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'datadog.yaml'
      - 'docker-compose.yaml'
      - 'conf.d/**'
      - 'system-probe.yaml'
      - 'scripts/**'
      - '.github/workflows/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Install Datadog CI for deployment tracking
      - name: Install Datadog CI
        run: |
          npm install -g @datadog/datadog-ci
          datadog-ci version
      
      # Build and push custom Datadog Agent image
      - name: Build and push Datadog Agent image
        id: docker_build_agent
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # Synology DS923+ AMD64 compatibility
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USER }}/dd-agent:latest
            ${{ secrets.DOCKERHUB_USER }}/dd-agent:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.date }}
      
      # Validate configuration files
      - name: Validate Datadog configuration
        run: |
          echo "Validating Datadog configuration files..."
          
          # Check if required files exist
          if [ ! -f "datadog.yaml" ]; then
            echo "‚ùå datadog.yaml not found"
            exit 1
          fi
          
          if [ ! -f "docker-compose.yaml" ]; then
            echo "‚ùå docker-compose.yaml not found"
            exit 1
          fi
          
          # Basic YAML syntax validation
          python -c "import yaml; yaml.safe_load(open('datadog.yaml'))" || {
            echo "‚ùå datadog.yaml has invalid YAML syntax"
            exit 1
          }
          
          python -c "import yaml; yaml.safe_load(open('docker-compose.yaml'))" || {
            echo "‚ùå docker-compose.yaml has invalid YAML syntax"
            exit 1
          }
          
          # Validate conf.d configurations
          for config_file in conf.d/**/*.yaml; do
            if [ -f "$config_file" ]; then
              echo "Validating $config_file..."
              python -c "import yaml; yaml.safe_load(open('$config_file'))" || {
                echo "‚ùå $config_file has invalid YAML syntax"
                exit 1
              }
            fi
          done
          
          echo "‚úÖ All configuration files are valid"
      
      # Copy configuration files to Synology
      - name: Copy configuration files to Synology
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          port: ${{ secrets.SYNOLOGY_SSH_PORT }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SYNOLOGY_SSH_KEY }}
          source: "datadog.yaml,system-probe.yaml,conf.d/*"
          target: "/tmp/datadog-config/"
          strip_components: 0

      # Deploy to Synology
      - name: Deploy Datadog Agent to Synology
        id: synology_deploy
        uses: appleboy/ssh-action@v1.0.3
        if: steps.docker_build_agent.outcome == 'success' && github.ref == 'refs/heads/main'
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          port: ${{ secrets.SYNOLOGY_SSH_PORT }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SYNOLOGY_SSH_KEY }}
          script: |
            # Debug: Environment setup
            echo "üîß Setting up deployment environment..."
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            
            # Find Docker command
            if [ -f /usr/local/bin/docker ]; then
              DOCKER_CMD="/usr/local/bin/docker"
            elif [ -f /usr/bin/docker ]; then
              DOCKER_CMD="/usr/bin/docker"
            elif command -v docker >/dev/null 2>&1; then
              DOCKER_CMD="docker"
            else
              echo "‚ùå Docker not found"
              exit 1
            fi
            
            # Check Docker permissions
            if $DOCKER_CMD --version >/dev/null 2>&1; then
              echo "‚úÖ Docker accessible without sudo"
            elif sudo $DOCKER_CMD --version >/dev/null 2>&1; then
              echo "‚úÖ Docker accessible with sudo"
              DOCKER_CMD="sudo $DOCKER_CMD"
            else
              echo "‚ùå Cannot access Docker"
              exit 1
            fi
            
            # Docker Compose command
            if command -v docker-compose >/dev/null 2>&1; then
              COMPOSE_CMD="docker-compose"
            elif $DOCKER_CMD compose version >/dev/null 2>&1; then
              COMPOSE_CMD="$DOCKER_CMD compose"
            elif sudo docker-compose --version >/dev/null 2>&1; then
              COMPOSE_CMD="sudo docker-compose"
            else
              echo "‚ùå Docker Compose not found"
              exit 1
            fi
            
            echo "Using Docker: $DOCKER_CMD"
            echo "Using Compose: $COMPOSE_CMD"
            
            # Set up Datadog Agent directory structure
            DATADOG_DIR="/volume1/docker/datadog-agent"
            echo "üìÅ Setting up Datadog Agent directory structure..."
            
            # Create main directory
            sudo mkdir -p "$DATADOG_DIR"
            sudo chown $(whoami):users "$DATADOG_DIR"
            
            # Create conf.d subdirectories
            sudo mkdir -p "$DATADOG_DIR/conf.d"
            sudo mkdir -p "$DATADOG_DIR/conf.d/postgres.d"
            sudo mkdir -p "$DATADOG_DIR/conf.d/mongo.d"
            sudo mkdir -p "$DATADOG_DIR/conf.d/snmp.d"
            sudo mkdir -p "$DATADOG_DIR/conf.d/syslog.d"
            sudo mkdir -p "$DATADOG_DIR/conf.d/network_path.d"
            sudo mkdir -p "$DATADOG_DIR/conf.d/networkdevice.d"
            
            # Set proper ownership
            sudo chown -R $(whoami):users "$DATADOG_DIR"
            
            # Copy configuration files from temp location
            echo "üìã Copying configuration files..."
            if [ -d "/tmp/datadog-config" ]; then
              # Copy main config files
              if [ -f "/tmp/datadog-config/datadog.yaml" ]; then
                cp "/tmp/datadog-config/datadog.yaml" "$DATADOG_DIR/"
                echo "‚úÖ Copied datadog.yaml"
              fi
              
              if [ -f "/tmp/datadog-config/system-probe.yaml" ]; then
                cp "/tmp/datadog-config/system-probe.yaml" "$DATADOG_DIR/"
                echo "‚úÖ Copied system-probe.yaml"
              fi
              
              # Copy conf.d directory structure
              if [ -d "/tmp/datadog-config/conf.d" ]; then
                cp -r /tmp/datadog-config/conf.d/* "$DATADOG_DIR/conf.d/" 2>/dev/null || echo "No conf.d files to copy"
                echo "‚úÖ Copied conf.d configurations"
              fi
              
              # Substitute environment variables in datadog.yaml
              if [ -f "$DATADOG_DIR/datadog.yaml" ]; then
                echo "üîß Substituting environment variables in datadog.yaml..."
                sed -i "s/\${DD_API_KEY}/${{ secrets.DD_API_KEY }}/g" "$DATADOG_DIR/datadog.yaml"
                echo "‚úÖ Environment variables substituted"
              fi
              
              # Clean up temp files
              rm -rf "/tmp/datadog-config"
            else
              echo "‚ö†Ô∏è  No configuration files found in temp location"
            fi
            
            # Set proper permissions on all config files
            find "$DATADOG_DIR" -name "*.yaml" -exec chmod 644 {} \;
            
            cd "$DATADOG_DIR"
            
            # List what we have
            echo "üìÇ Configuration files structure:"
            find "$DATADOG_DIR" -name "*.yaml" | head -20
            
            # Login to Docker Hub
            echo "üîê Logging into Docker Hub..."
            if ! echo "${{ secrets.DOCKERHUB_TOKEN }}" | $DOCKER_CMD login --username "${{ secrets.DOCKERHUB_USER }}" --password-stdin; then
              echo "‚ùå Failed to login to Docker Hub"
              exit 1
            fi
            
            # Pull the latest agent image
            echo "üì• Pulling latest Datadog Agent image..."
            $DOCKER_CMD pull ${{ secrets.DOCKERHUB_USER }}/dd-agent:latest
            
            # Pull the latest OPW image
            echo "üì• Pulling latest Observability Pipelines Worker image..."
            $DOCKER_CMD pull datadog/observability-pipelines-worker:latest
            
            # Stop existing services gracefully
            echo "üõë Stopping existing Datadog services..."
            if [ -f "docker-compose.yaml" ]; then
              $COMPOSE_CMD down --timeout 30 || echo "No existing services to stop"
            fi
            
            # Clean up old containers and images
            echo "üßπ Cleaning up old resources..."
            $DOCKER_CMD container prune -f
            $DOCKER_CMD image prune -f
            
            # Update docker-compose.yaml to use the new image
            echo "üìù Updating docker-compose configuration..."
            cat > docker-compose.yaml << 'EOF'
            version: '3'
            
            services:
              dd-agent:
                image: ${{ secrets.DOCKERHUB_USER }}/dd-agent:latest
                container_name: dd-agent
                privileged: true
                networks:
                  - dd-net
                ports:
                  - "8125:8125/udp"
                  - "8126:8126/tcp"
                  - "2055:2055/udp"
                  - "2056:2056/udp"
                  - "4739:4739/udp"
                  - "6343:6343/udp"
                  - "514:514/udp"
                environment:
                  - DD_API_KEY=${{ secrets.DD_API_KEY }}
                  - DD_SITE=datadoghq.com
                  - DD_HOSTNAME=Synology
                  - DD_APM_ENABLED=true
                  - DD_LOGS_ENABLED=true
                  - DD_PROCESS_AGENT_ENABLED=true
                  - DD_SYSTEM_PROBE_NETWORK_ENABLED=true
                  - DD_PROCESS_CONFIG_PROCESS_COLLECTION_ENABLED=true
                  - DD_PROCESS_CONFIG_CONTAINER_COLLECTION_ENABLED=true
                  - DD_LOGS_CONFIG_LOGS_DD_URL=http://dd-opw:8282
                  - DD_LOGS_CONFIG_USE_HTTP=true
                  - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
                  - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
                  - DD_ENABLE_METADATA_COLLECTION=true
                  - DD_LOG_LEVEL=info
                  - DD_CMD_PORT=5002
                  - DD_EXPVAR_PORT=5003
                  - DD_APM_DD_URL=http://192.168.1.100:3835
                  - DD_APM_NON_LOCAL_TRAFFIC=true
                  - DD_APM_ENV=dev
                  - DD_INVENTORIES_CONFIGURATION_ENABLED=true
                  - DD_REMOTE_UPDATES=true
                  - DD_TAGS=env:dev,deployment:synology,version:${{ github.sha }}
                                 volumes:
                   - /var/run/docker.sock:/var/run/docker.sock:ro
                   - /proc:/host/proc:ro
                   - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
                   - /sys/kernel/debug:/sys/kernel/debug
                   - /etc/passwd:/etc/passwd:ro
                   - /volume1/@docker/containers:/var/lib/docker/containers:ro
                   # Configuration files from GitHub repo
                   - /volume1/docker/datadog-agent/datadog.yaml:/etc/datadog-agent/datadog.yaml:ro
                   - /volume1/docker/datadog-agent/system-probe.yaml:/etc/datadog-agent/system-probe.yaml:ro
                   - /volume1/docker/datadog-agent/conf.d:/etc/datadog-agent/conf.d:ro
                cap_add:
                  - SYS_ADMIN
                  - SYS_RESOURCE
                  - SYS_PTRACE
                  - NET_ADMIN
                  - NET_BROADCAST
                  - NET_RAW
                  - IPC_LOCK
                  - CHOWN
                security_opt:
                  - apparmor:unconfined
                restart: unless-stopped
                labels:
                  - "deployment.timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
                  - "deployment.source=github-actions"
                  - "deployment.commit=${{ github.sha }}"
                  - "deployment.repository=${{ github.repository }}"
            
              dd-opw:
                image: datadog/observability-pipelines-worker:latest
                container_name: dd-opw
                networks:
                  - dd-net
                ports:
                  - "8282:8282/tcp"
                  - "8686:8686/tcp"
                environment:
                  - DD_API_KEY=${{ secrets.DD_OPW_API_KEY }}
                  - DD_OP_PIPELINE_ID=${{ secrets.DD_OP_PIPELINE_ID }}
                  - DD_SITE=datadoghq.com
                  - DD_OP_SOURCE_DATADOG_AGENT_ADDRESS=0.0.0.0:8282
                  - DD_OP_CONFIG_SOURCE=datadog
                  - DD_LOG_LEVEL=debug
                  - RUST_LOG=info,observability_pipelines_worker=debug,vector=debug
                  - DD_OP_API_ENABLED=true
                  - DD_OP_API_ADDRESS=0.0.0.0:8686
                volumes:
                  - opw-data:/var/lib/datadog/observability-pipelines-worker
                restart: unless-stopped
                command: ["run"]
                labels:
                  - "deployment.timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
                  - "deployment.source=github-actions"
                  - "deployment.commit=${{ github.sha }}"
            
            networks:
              dd-net:
                driver: bridge
            
            volumes:
              opw-data:
            EOF
            
            # Start the services
            echo "üöÄ Starting Datadog services..."
            $COMPOSE_CMD up -d
            
            # Wait for services to be ready
            echo "‚è≥ Waiting for services to start..."
            sleep 30
            
            # Verify services are running
            echo "üîç Verifying service status..."
            if $COMPOSE_CMD ps | grep -q "dd-agent.*Up"; then
              echo "‚úÖ Datadog Agent is running"
            else
              echo "‚ùå Datadog Agent failed to start"
              $COMPOSE_CMD logs dd-agent
              exit 1
            fi
            
            if $COMPOSE_CMD ps | grep -q "dd-opw.*Up"; then
              echo "‚úÖ Observability Pipelines Worker is running"
            else
              echo "‚ö†Ô∏è  OPW may still be starting up"
              $COMPOSE_CMD logs dd-opw --tail 20
            fi
            
            # Health check
            echo "üè• Performing health checks..."
            
            # Check Datadog Agent health
            if $DOCKER_CMD exec dd-agent /opt/datadog-agent/bin/agent/agent health 2>/dev/null; then
              echo "‚úÖ Datadog Agent health check passed"
            else
              echo "‚ö†Ô∏è  Datadog Agent health check failed - checking logs..."
              $COMPOSE_CMD logs dd-agent --tail 20
            fi
            
            # Check if OPW API is responding
            if curl -f http://localhost:8686/api/v1/health 2>/dev/null; then
              echo "‚úÖ OPW API health check passed"
            else
              echo "‚ö†Ô∏è  OPW API not responding yet (may still be starting)"
            fi
            
            # Show final status
            echo "üìä Final service status:"
            $COMPOSE_CMD ps
            
            echo "üéâ Datadog Agent deployment completed successfully!"
            echo "üìç Agent Status: http://localhost:5002/status"
            echo "üìç OPW API: http://localhost:8686"
      
      # Mark deployment in Datadog (only for main branch)
      - name: Mark Deployment in Datadog
        if: steps.synology_deploy.outcome == 'success' && github.ref == 'refs/heads/main'
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_SITE: datadoghq.com
          DD_BETA_COMMANDS_ENABLED: 1
        run: |
          REVISION="${{ github.sha }}"
          SHORT_SHA="${REVISION:0:7}"
          DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "üìä Marking Datadog Agent deployment..."
          echo "Environment: infrastructure"
          echo "Service: datadog-agent"
          echo "Revision: $SHORT_SHA"
          echo "Deploy Time: $DEPLOY_TIME"
          
          # Mark the deployment
          datadog-ci deployment mark \
            --env "infrastructure" \
            --service "datadog-agent" \
            --revision "$SHORT_SHA" \
            --tags "deployment_method:github_actions" \
            --tags "repository:${{ github.repository }}" \
            --tags "branch:${{ github.ref_name }}" \
            --tags "actor:${{ github.actor }}" \
            --tags "workflow:${{ github.workflow }}" \
            --tags "run_id:${{ github.run_id }}" \
            --tags "deploy_time:$DEPLOY_TIME" \
            --tags "component:monitoring" \
            --tags "infrastructure:synology" \
            --no-fail || echo "‚ö†Ô∏è  Failed to mark deployment in Datadog (non-blocking)"
          
          echo "‚úÖ Deployment marked in Datadog successfully!"
      
      # Notification on failure
      - name: Notify on Failure
        if: failure()
        run: |
          echo "‚ùå Datadog Agent deployment failed!"
          echo "Please check the logs and configuration files."
          echo "Common issues:"
          echo "- Docker Hub authentication"
          echo "- SSH connection to Synology"
          echo "- Invalid YAML configuration"
          echo "- Missing secrets" 